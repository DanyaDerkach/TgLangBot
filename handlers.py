from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from functools import wraps

import keyboards as kb

router = Router()

class QuizState(StatesGroup):
    testing = State()
    level = State()
    quiz = State()

def no_state():
    def decorator(handler):
        @wraps(handler)
        async def wrapper(message: Message, state: FSMContext, *args, **kwargs):
            current_state = await state.get_state()
            if current_state:
                await message.answer("üö´ –¶—è –¥—ñ—è –∑–∞—Ä–∞–∑ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.\n–ù–∞–ø–∏—à—ñ—Ç—å /exit, —â–æ–± –≤–∏–π—Ç–∏.")
                return
            return await handler(message, state, *args, **kwargs)
        return wrapper
    return decorator

@router.message(Command("exit"))
async def cmd_start(message: Message, state: FSMContext, callback: CallbackQuery):
    await state.set_state(None)
    await callback.message.edit_reply_markup(reply_markup=None)
    await message.answer(f"", reply_markup=kb.main)

@router.message(CommandStart())
@no_state()
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(f"""
Hello, {message.from_user.full_name}!

üß† –©–æ —è –≤–º—ñ—é:
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª—ñ–≤ (ENG‚ÜíUA, UA‚ÜíENG)
‚Ä¢ –ü—Ä–æ–≤–æ–¥–∏—Ç–∏ —Ç–µ—Å—Ç–∏ –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
‚Ä¢ –ü—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ —Ä—ñ–≤–Ω—è–º–∏ A1‚ÄìC2

–û–±–µ—Ä–∏, –∑ —á–æ–≥–æ —Ö–æ—á–µ—à –ø–æ—á–∞—Ç–∏:
‚Ä¢ /level ‚Äî –æ–±—Ä–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
‚Ä¢ /mode ‚Äî –≤–∏–±—Ä–∞—Ç–∏ —Ä–µ–∂–∏–º –≥—Ä–∏ –∞–±–æ —Ç–µ—Å—Ç—É
‚Ä¢ /help ‚Äî –¥–æ–≤—ñ–¥–∫–∞""", reply_markup=kb.main)

@router.message(Command("help"))
@no_state()
async def get_help(message: Message, state: FSMContext):
    await message.answer("""
–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:

/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î —Ä–æ–±–æ—Ç—É –±–æ—Ç–∞
/level ‚Äî –≤–∏–±—Ä–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏
/test ‚Äî —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
/quiz ‚Äî —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ –≤—ñ–¥–∫—Ä–∏—Ç–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é
/help ‚Äî –¥–æ–≤—ñ–¥–∫–∞""")

@router.message(F.text == "‚ùî –î–æ–≤—ñ–¥–∫–∞")
@no_state()
async def get_help(message: Message, state: FSMContext):
    await message.answer("""
–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:

/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î —Ä–æ–±–æ—Ç—É –±–æ—Ç–∞
/level ‚Äî –≤–∏–±—Ä–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏
/test ‚Äî —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
/quiz ‚Äî —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ –≤—ñ–¥–∫—Ä–∏—Ç–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é
/help ‚Äî –¥–æ–≤—ñ–¥–∫–∞""")

@router.message(F.text =='üí™ –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å')
@no_state()
async def start_test(message: Message, state: FSMContext):
    await state.set_state(QuizState.level)
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:", reply_markup=kb.level)

@router.message(QuizState.level)
async def level_chosen(message: Message, state: FSMContext):
    text = message.text.strip()
    valid = {"A1", "A2", "B1","B2", "C1", "C2"}
    parts = text.split()
    level = parts[-1] if len(parts) > 0 else ""
    if level not in valid:
        await message.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ä—ñ–≤–µ–Ω—å.")
        return
    await state.update_data(level=level)
    await message.answer(f"‚úÖ –†—ñ–≤–µ–Ω—å {level} –æ–±—Ä–∞–Ω–æ.", reply_markup=kb.main)
    await state.set_state(None)

@router.message(F.text == '‚úèÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è')
@no_state()
async def start_test(message: Message, state: FSMContext):
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª–∞–¥—É:", reply_markup=kb.language)

@router.callback_query(F.data.in_(["eng_to_ua", "ua_to_eng"]))
async def select_mode(callback: CallbackQuery, state: FSMContext):

    await state.set_state(QuizState.testing)
    level = (await state.get_data()).get("level", "A1")
    word, correct_answer, keyboard = kb.generate_question(level)
    await state.update_data(correct=correct_answer)

    await callback.message.edit_text(f"üî§ –Ø–∫ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—î—Ç—å—Å—è —Å–ª–æ–≤–æ: {word}?", reply_markup=keyboard)

@router.callback_query(F.data.startswith("answer_"))
async def check_answer(callback: CallbackQuery, state: FSMContext):
    selected = callback.data.split("_", 1)[1]
    data = await state.get_data()
    correct = data.get("correct")
    points = 0
    if selected == correct:
        result = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
        points = points + 1
    else:
        result= f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct}\n\n"

    level = (await state.get_data()).get("level", "A1")
    word, correct_answer, keyboard = kb.generate_question(level)
    await state.update_data(correct=correct_answer)
    await callback.message.edit_text(f"{result}üî§ –Ø–∫ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—î—Ç—å—Å—è —Å–ª–æ–≤–æ: {word}?", reply_markup=keyboard)

#@router.message(F.text == 'üí¨ –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞')
#async def start_test(message: Message):
#    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª–∞–¥—É:", reply_markup=kb.language)
