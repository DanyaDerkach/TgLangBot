from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from functools import wraps

import keyboards as kb

router = Router()

class QuizState(StatesGroup):
    testing = State()
    level = State()
    quiz = State()

def no_state():
    def decorator(handler):
        @wraps(handler)
        async def wrapper(message: Message, state: FSMContext, *args, **kwargs):
            current_state = await state.get_state()
            if current_state:
                await message.answer("üö´ –¶—è –¥—ñ—è –∑–∞—Ä–∞–∑ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.")
                return
            return await handler(message, state, *args, **kwargs)
        return wrapper
    return decorator

@router.message(CommandStart())
@no_state()
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(f"""
Hello, {message.from_user.full_name}!

–í–∏–≤—á–∏ –ø–∞—Ä—É —Å–ª—ñ–≤ –ª–µ–≥–∫–æ —á–µ—Ä–µ–∑ —à–≤–∏–¥–∫–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è üéØ
–û–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá""", reply_markup=kb.main)

@router.message(Command("help"))
@no_state()
async def get_help(message: Message, state: FSMContext):
    await message.answer("""
–ë–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –≤–∏–≤—á–∞—Ç–∏ —Å–ª–æ–≤–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é —Ç–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –≤ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ–π —Ñ–æ—Ä–º—ñ.
üìã –ö–æ–º–∞–Ω–¥–∏ —Ç–∞ –∫–Ω–æ–ø–∫–∏:

üîπ /start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞
üîπ ‚ùî –î–æ–≤—ñ–¥–∫–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
üîπ üí™ –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å ‚Äî –≤–∏–±—ñ—Ä —Ä—ñ–≤–Ω—è –∑–Ω–∞–Ω—å: A1, A2, B1, B2, C1, C2
üîπ ‚úèÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç: –ø–µ—Ä–µ–∫–ª–∞–¥ —Å–ª—ñ–≤ –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –∞–±–æ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó
üîπ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ‚Äî –∑—É–ø–∏–Ω–∏—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Ä—É—á–Ω—É""")

@router.message(F.text == "‚ùî –î–æ–≤—ñ–¥–∫–∞")
@no_state()
async def get_help(message: Message, state: FSMContext):
    await message.answer("""
–ë–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –≤–∏–≤—á–∞—Ç–∏ —Å–ª–æ–≤–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é —Ç–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –≤ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ–π —Ñ–æ—Ä–º—ñ.
üìã –ö–æ–º–∞–Ω–¥–∏ —Ç–∞ –∫–Ω–æ–ø–∫–∏:

üîπ /start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞
üîπ ‚ùî –î–æ–≤—ñ–¥–∫–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
üîπ üí™ –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å ‚Äî –≤–∏–±—ñ—Ä —Ä—ñ–≤–Ω—è –∑–Ω–∞–Ω—å: A1, A2, B1, B2, C1, C2
üîπ ‚úèÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç: –ø–µ—Ä–µ–∫–ª–∞–¥ —Å–ª—ñ–≤ –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –∞–±–æ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó
üîπ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ‚Äî –∑—É–ø–∏–Ω–∏—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Ä—É—á–Ω—É""")

@router.message(F.text =='üí™ –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å')
@no_state()
async def start_test(message: Message, state: FSMContext):
    await state.set_state(QuizState.level)
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:", reply_markup=kb.level)

@router.message(QuizState.level)
async def level_chosen(message: Message, state: FSMContext):
    text = message.text.strip()
    valid = {"A1", "A2", "B1","B2", "C1", "C2"}
    parts = text.split()
    level = parts[-1] if len(parts) > 0 else ""
    if level not in valid:
        await message.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ä—ñ–≤–µ–Ω—å.")
        return
    await state.update_data(level=level)
    await message.answer(f"‚úÖ –†—ñ–≤–µ–Ω—å {level} –æ–±—Ä–∞–Ω–æ.", reply_markup=kb.main)
    await state.set_state(None)

@router.message(F.text == '‚úèÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è')
@no_state()
async def start_test(message: Message, state: FSMContext):
    sent = await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª–∞–¥—É:", reply_markup=kb.language)
    await state.update_data(select_mode_msg_id=sent.message_id)

@router.callback_query(F.data.in_(["eng_to_ua", "ua_to_eng"]))
async def select_mode(callback: CallbackQuery, state: FSMContext):
    mode = callback.data
    await state.set_state(QuizState.testing)
    level = (await state.get_data()).get("level", "A1")
    await state.update_data(mode=mode)
    word, correct_answer, keyboard = kb.generate_question(level, mode)
    await state.update_data(correct=correct_answer)
    sent = await callback.message.answer("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ", reply_markup=kb.exit_test)
    await callback.message.edit_text(f"üî§ –Ø–∫ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—î—Ç—å—Å—è —Å–ª–æ–≤–æ: {word}?", reply_markup=keyboard)
    await state.update_data(
        test_started_msg_id=sent.message_id,
        test_question_msg_id=callback.message.message_id
    )
    await callback.answer()

@router.callback_query(F.data.startswith("answer_"))
async def check_answer(callback: CallbackQuery, state: FSMContext):
    selected = callback.data.split("_", 1)[1]
    data = await state.get_data()
    mode = await state.get_data()
    correct = data.get("correct")
    points = data.get("points", 0)
    count = data.get("count", 0)
    if selected == correct:
        result = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
        points += 1
    else:
        result= f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct}\n\n"
    count +=1
    level = (await state.get_data()).get("level", "A1")
    word, correct_answer, keyboard = kb.generate_question(level, mode)
    await state.update_data(correct=correct_answer, points=points, count=count)
    await callback.message.edit_text(f"{result}üî§ –Ø–∫ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—î—Ç—å—Å—è —Å–ª–æ–≤–æ: {word}?", reply_markup=keyboard)

@router.message(F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
async def finish_test(message: Message, state: FSMContext, bot: Bot):
    current_state = await state.get_state()
    if current_state != QuizState.testing.state:
        await message.answer("‚ùå –í–∏ –∑–∞—Ä–∞–∑ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.")
        return
    data = await state.get_data()
    points = data.get("points", 0)
    count = data.get("count", 0)
    msg_ids = [data.get("select_mode_msg_id"), data.get("test_started_msg_id"), data.get("test_question_msg_id")]

    for msg_id in msg_ids:
        if msg_id:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception as e:
                print(f"–ù–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è: {e}")

    await state.clear()
    await message.answer(f"–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π {points}/{count}", reply_markup=kb.main)

#@router.message(F.text == 'üí¨ –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞')
#async def start_test(message: Message):
#    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª–∞–¥—É:", reply_markup=kb.language)
